import React from 'react';
// import 'antd/dist/antd.less';
import { BrowserRouter, Switch } from 'react-router-dom';
import HomePage from 'pages/HomePage';
import { GlobalContext } from './contexts/GlobalContext';
import ChangePasswordPage from 'pages/ChangePasswordPage';
import MyTaskListPage from 'pages/MyTask/MyTaskListPage';
import TaskTemplatePage from 'pages/TaskTemplate/TaskTemplatePage';
import DocTemplatePage from 'pages/DocTemplate/DocTemplatePage';
import PortfolioListPage from 'pages/Portfolio/PortfolioListPage';
import AdminTaskListPage from 'pages/AdminTask/AdminTaskListPage';
import ProceedTaskPage from 'pages/AdminTask/ProceedTaskPage';
import { getAuthUser } from 'services/authService';
import { RoleRoute } from 'components/RoleRoute';
import MyTaskPage from 'pages/MyTask/MyTaskPage';
import RecurringListPage from 'pages/Recurring/RecurringListPage';
import MessagePage from 'pages/Message/MessagePage';
import UserListPage from 'pages/User/UserListPage';
import ImpersonatePage from 'pages/Impersonate/ImpersonatePage';
import { countUnreadMessage } from 'services/messageService';
import PortfolioFormPage from 'pages/Portfolio/PortfolioFormPage';
import DeclarationPage from 'pages/DeclarationPage';
import ClientDashboardPage from 'pages/ClientDashboard/ClientDashboardPage';
import AdminStatsPage from 'pages/AdminStats/AdminStatsPage';
import AdminBoardPage from 'pages/AdminBoard/AdminBoardPage';
import AdminBlogPage from 'pages/AdminBlog/AdminBlogPage';
import BlogsPage from 'pages/BlogsPage';
import ProfilePage from 'pages/Profile/ProfilePage';
import EmailTemplateListPage from 'pages/EmailTemplate/EmailTemplateListPage';
import { ConfigProvider } from 'antd';
import loadable from '@loadable/component'
import { IntlProvider } from "react-intl";
import antdLocaleEN from 'antd/lib/locale/en_US';
import antdLocaleZH from 'antd/lib/locale/zh_CN';
import intlMessagesEN from "./translations/en-US.json";
import intlMessagesZH from "./translations/zh-CN.json";
import { getDefaultLocale } from './util/getDefaultLocale';

const SignUpPage = loadable(() => import('pages/SignUpPage'));
const Error404 = loadable(() => import('pages/Error404'));
const LogInPage = loadable(() => import('pages/LogInPage'));
const ResetPasswordPage = loadable(() => import('pages/ResetPasswordPage'));
const ForgotPasswordPage = loadable(() => import('pages/ForgotPasswordPage'));
const PrivacyPolicyPage = loadable(() => import('pages/PrivacyPolicyPage'));
const TermAndConditionPage = loadable(() => import('pages/TermAndConditionPage'));
const AppLoggedIn = loadable(() => import('AppLoggedIn'));

const localeDic = {
  'en-US': {
    antdLocale: antdLocaleEN,
    intlLocale: 'en',
    intlMessages: intlMessagesEN,
  },
  'zh-CN': {
    antdLocale: antdLocaleZH,
    intlLocale: 'zh',
    intlMessages: intlMessagesZH
  }
}

const DEFAULT_LOCALE = getDefaultLocale();

class App extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      user: null,
      role: 'guest',
      loading: true,
      setUser: this.setUser,
      setLoading: this.setLoading,
      notifyCount: 0,
      setNotifyCount: this.setNotifyCount
    };
  }

  async componentDidMount() {
    this.setLoading(true);
    const user = await getAuthUser();
    if (user) {
      this.setUser(user);
      if (user.role !== 'system') {
        const count = await countUnreadMessage();
        this.setNotifyCount(count);
      }
    }
    this.setLoading(false);
  }

  setUser = (user) => {
    this.setState({ user, role: user ? user.role : 'guest' });
  }

  setLoading = (value) => {
    this.setState({ loading: !!value });
  }

  setNotifyCount = (value) => {
    this.setState({ notifyCount: value });
  }

  render() {
    const { role, loading } = this.state;
    const isSystem = role === 'system';
    const isAdmin = role === 'admin';
    const isGuest = role === 'guest';
    const isClient = role === 'client';
    const isAgent = role === 'agent';

    return (
      <GlobalContext.Provider value={this.state}>
        <ConfigProvider locale={antdLocale}>
          <IntlProvider locale={intlLocale} messages={intlMessages}>
            <BrowserRouter basename="/">
              <Switch>
                <RoleRoute visible={isGuest} loading={loading} exact path="/login" component={LogInPage} />
                <RoleRoute visible={isGuest} loading={loading} exact path="/signup" component={SignUpPage} />
                <RoleRoute visible={isGuest} loading={loading} exact path="/forgot_password" component={ForgotPasswordPage} />
                <RoleRoute loading={loading} path="/reset_password" exact component={ResetPasswordPage} />
                <RoleRoute loading={loading} path="/terms_and_conditions" exact component={TermAndConditionPage} />
                <RoleRoute loading={loading} path="/privacy_policy" exact component={PrivacyPolicyPage} />
                <RoleRoute loading={loading} path="/declaration" exact component={DeclarationPage} />
                <RoleRoute loading={loading} path="/blogs" exact component={BlogsPage} />
                <RoleRoute loading={loading} path="/" exact component={HomePage} />



                <RoleRoute visible={isAdmin} loading={loading} exact path="/blogs/admin" component={AdminBlogPage} />
                <RoleRoute visible={isAdmin || isAgent} loading={loading} exact path="/stats" component={AdminStatsPage} />
                {/* <RoleRoute visible={isAdmin || isAgent} loading={loading} exact path="/board" component={AdminBoardPage} /> */}
                <RoleRoute visible={isClient} loading={loading} exact path="/landing" component={ClientDashboardPage} />
                <RoleRoute visible={isClient} loading={loading} exact path="/portfolios" component={PortfolioListPage} />
                <RoleRoute visible={!isGuest} loading={loading} exact path="/portfolios/:id" component={PortfolioFormPage} />
                <RoleRoute visible={!isGuest} loading={loading} exact path="/portfolios/new/:type" component={PortfolioFormPage} />
                <RoleRoute visible={isAdmin} loading={loading} exact path="/task_template" component={TaskTemplatePage} />
                <RoleRoute visible={isAdmin} loading={loading} exact path="/task_template/:id" component={TaskTemplatePage} />
                <RoleRoute visible={isAdmin} loading={loading} exact path="/doc_template" component={DocTemplatePage} />
                <RoleRoute visible={isAdmin || isSystem} loading={loading} exact path="/user" component={UserListPage} />
                <RoleRoute visible={isAdmin} loading={loading} exact path="/recurring" component={RecurringListPage} />
                <RoleRoute visible={isAdmin} loading={loading} exact path="/impersonate" component={ImpersonatePage} />
                <RoleRoute visible={!isGuest} loading={loading} path="/message" exact component={MessagePage} />
                <RoleRoute visible={!isGuest} loading={loading} path="/tasks/new" exact component={MyTaskPage} />
                <RoleRoute visible={!isGuest} loading={loading} path="/tasks/:id" exact component={MyTaskPage} />
                <RoleRoute visible={isAdmin || isAgent || isClient} loading={loading} path="/tasks" exact component={isClient ? MyTaskListPage : AdminTaskListPage} />
                <RoleRoute visible={isAdmin || isAgent} loading={loading} path="/tasks/:id/proceed" exact component={ProceedTaskPage} />
                <RoleRoute visible={!isGuest} loading={loading} path="/profile" exact component={ProfilePage} />
                <RoleRoute visible={!isGuest} loading={loading} path="/change_password" exact component={ChangePasswordPage} />
                <RoleRoute visible={isAdmin} loading={loading} exact path="/email_template" component={EmailTemplateListPage} />
                {/* <Redirect to="/" /> */}
                <RoleRoute loading={loading} component={Error404} />

              </Switch>
            </BrowserRouter>
          </IntlProvider>
        </ConfigProvider>
      </GlobalContext.Provider>
    );
  }
}

export default App;
